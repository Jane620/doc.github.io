TestNG基础
===============================

概述
~~~~~~~~~~~~~~~~~~~
测试框架,来源于Junit和Nunit，是一个开源自动化测试框架


特点
~~~~~~~~~~~~~~~~~~~

* 注解
* TestNG使用Java和面向对象的功能
* 支持综合类测试(例如，默认情况下，不用创建一个新的测试每个测试方法的类的实例)
* 独立的编译时测试代码和运行时配置/数据信息
* 灵活的运行时配置
* 主要介绍“测试组”。当编译测试，只要要求TestNG运行所有的“前端”的测试，或“快”，“慢”，“数据库”等
* 支持依赖测试方法，并行测试，负载测试，局部故障
* 灵活的插件API
* 支持多线程测试


TestNG下载和安装
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

基本都是采用直接在pom下引入依赖

::

  <dependency>
			<groupId>org.testng</groupId>
			<artifactId>testng</artifactId>
			<version>6.10</version>
 </dependency>


基于Springboot的TestNG写法
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

因为springboot默认是提供了Junit的测试集成，因此如果需要采用TestNG则需要继承AbstractTransactionalTestNGSpringContextTests


TestNG套件
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

创建一个testng.xml配置文件

::

  <suite name="TestAll">
    <!-- Run test class -->
    <test name="final">
        <classes>
            <class name="com.yiibai.TestSelenium" />
            <class name="com.yiibai.TestGroup" />
        </classes>
    </test>
    <!-- Run test method on group "selenium" only -->
    <test name="selenium">
        <groups>
            <run>
                <include name="selenium-test" />
            </run>
        </groups>
        <classes>
            <class name="com.yiibai.TestSelenium" />
            <class name="com.yiibai.TestGroup" />
        </classes>
    </test>
  </suite>


TestNG异常
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

测试系统异常时候，可以定义具体捕获的异常
当捕获异常时，测试通过，反之失败

::

  public class TestException{

      @Test(expectedExceptions = ArithmeticException.class)
      public void DivisionWithException(){
           int i = 1/0;
           System.out.println("i is:" + i);
      }
  }

忽略测试
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

通过注解配置false，让该测试用例不执行，因为可能代码未完成或者存在问题
默认@Test即为True

::

  @Test(enable=false)


超时测试
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
通过@Test(timeOut = 5000)
::

  public class TimeOut {

    @Test(timeOut = 5000)
    public void timeOut1() throws InterruptedException{
        Thread.sleep(4000);
    }

    @Test(timeOut = 5000)
    public void timeOut2() throws InterruptedException{
        Thread.sleep(6000);
    }

  }

分组测试
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
方法分组和类分组

* 通过注解@Test(groups="") ,@BeforeGroups ,@AfterGroups,@Test(dependsOnGroups ={"",""})进行测试用例的方法分组
* 通过在类上添加注解@Test(groups="")，以及创建testng.xml ,定义classes则运行类，groups则运行对应类中的分组

.. warning::
  @Test(groups="")，通过groups = xx进行测试用例的分组
  @BeforeGroups 和 @AfterGroups 可以在整个分组前进行执行
  @Test(dependsOnGroups ={"",""}) 则依赖其他groups执行完成后才执行


套件测试
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
通过定义多个testng.xml来规划不同的执行目的

::

  常见的:
  <!--order测试类-->
    <test name="order">
        <classes>
            <class name="testng.suite.TestConfig" />
            <class name="testng.suite.TestOrder" />
        </classes>
    </test>

  只执行特定类的某个函数的
  <test name="order">
        <classes>
            <class name="testng.suite.TestOrder" />
                <methods>
                    <include name="testUpdateOrder" />
                    <exclude name="testFindOrder" />
                </methods>
        </classes>
    </test>

  只执行类特定group
  <test name="order">
        <groups>
            <run>
                <exclude name="brokenTests" />
                <include name="db-nosql" />
            </run>
        </groups>

        <classes>
            <class name="testng.suite.TestDatabases"/>
        </classes>
    </test>
    
  只执行某个包下的所有测试类
  <test name="All">
        <packages>
            <package name="testng.demo.*"/>
        </packages>
    </test>
