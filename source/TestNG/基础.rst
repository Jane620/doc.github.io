TestNG基础
===============================

概述
~~~~~~~~~~~~~~~~~~~
测试框架,来源于Junit和Nunit，是一个开源自动化测试框架


特点
~~~~~~~~~~~~~~~~~~~

* 注解
* TestNG使用Java和面向对象的功能
* 支持综合类测试(例如，默认情况下，不用创建一个新的测试每个测试方法的类的实例)
* 独立的编译时测试代码和运行时配置/数据信息
* 灵活的运行时配置
* 主要介绍“测试组”。当编译测试，只要要求TestNG运行所有的“前端”的测试，或“快”，“慢”，“数据库”等
* 支持依赖测试方法，并行测试，负载测试，局部故障
* 灵活的插件API
* 支持多线程测试


TestNG下载和安装
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

基本都是采用直接在pom下引入依赖

::

  <dependency>
			<groupId>org.testng</groupId>
			<artifactId>testng</artifactId>
			<version>6.10</version>
	</dependency>


基于Springboot的TestNG写法
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

因为springboot默认是提供了Junit的测试集成，因此如果需要采用TestNG则需要继承AbstractTransactionalTestNGSpringContextTests


TestNG套件
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

创建一个testng.xml配置文件
::
  <?xml version="1.0" encoding="UTF-8"?>
  <!DOCTYPE suite SYSTEM "http://testng.org/testng-1.0.dtd" >
  <suite name="TestAll">
      <!-- @BeforeTest -->
      <test name="case1">
          <classes>
              <class name="com.example.demo.testng.config.TestDBConnection" />
              <class name="com.example.demo.testng.config.DBConfig" />
          </classes>
      </test>
      <!-- @AfterTest -->
      <!-- @BeforeTest -->
      <test name="case2">
          <classes>
              <class name="com.example.demo.testng.config.TestDBConnection" />
              <class name="com.example.demo.testng.config.DBConfig" />
          </classes>
      </test>
      <!-- @AfterTest -->
    </suite>

TestNG异常
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
测试系统异常时候，可以定义具体捕获的异常
当捕获异常时，测试通过，反之失败
::
  public class TestException{

      @Test(expectedExceptions = ArithmeticException.class)
      public void DivisionWithException(){
           int i = 1/0;
           System.out.println("i is:" + i);
      }
  }

忽略测试
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
通过注解配置false，让该测试用例不执行，因为可能代码未完成或者存在问题
默认@Test即为True
::
  @Test(enable=false)


超时测试
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
