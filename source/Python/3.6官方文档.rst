Python3.6官方文档
=========================

目录




特性
~~~~~~~~~~~~~~~~~~~~~~~~~~~

装饰器
可以在不破坏原函数逻辑的基础上进行额外处理，例如下面就是增加输出函数处理时间
::
import time

class Decorator:
  def timing(f):
      def wrap(*args):
          t1 = time.time()
          rest = f(*args)
          time.sleep(2)
          t2 = time.time()
          print("time lasted: ",t2-t1)
          return rest
      return wrap

  @pre_operator
  def sayHi(self, name):
      print("Hi, ",name)



lambda / filter /map
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

return filter(func,iterator) , 需要注意python3返回的是filter对象，即迭代器，根据惰性原理，因此比python2性能更好

eg.

dict_data = {"a":{"e":"1","f":"2"},"b":"2","c":"3"}

def get_value(data_source, filter):
    return data_source[filter].values()

def is_value(value):
    return value and value == "1"

def filter_data(data_source,type):
    return filter(lambda x: is_value(x) ,get_value(data_source,type))

if __name__ == '__main__':
    var1 = filter_data(dict_data,"a")
    print(var1.__next__())  #1
    print(var1.__next__())  #StopIteration
